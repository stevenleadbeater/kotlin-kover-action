name: 'Kotlin Kover'
description: 'Code coverage using kotlin, gradle and the kover plugin'
branding:
  icon: 'check-square'
  color: 'green'
inputs:
  coverage-threshold:
    description: 'Minimum coverage, below this value will fail'
    required: true
    default: 80
  repo-token:
    description: 'GitHub Token to use to apply comment to PR'
    required: true
outputs:
  line-coverage:
    description: "Line coverage"
    value: ${{ steps.parse_coverage.outputs.line_covered }}
  instruction-coverage:
    description: "Instruction coverage"
    value: ${{ steps.parse_coverage.outputs.instruction_covered }}
  branch-coverage:
    description: "Branch coverage"
    value: ${{ steps.parse_coverage.outputs.branch_covered }}
  method-coverage:
    description: "Method coverage"
    value: ${{ steps.parse_coverage.outputs.method_covered }}
  class-coverage:
    description: "Class coverage"
    value: ${{ steps.parse_coverage.outputs.class_covered }}
runs:
  using: "composite"
  steps:
    - uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      shell: bash
      run: chmod +x gradlew
    - name: Get coverage
      shell: bash
      run: ./gradlew koverReport --no-daemon
    - name: Parse coverage
      id: parse_coverage
      uses: stevenleadbeater/kover-report-parser-action@0.0.1
    - name: Calculate coverage
      id: caulculate_coverage_percentage
      shell: bash
      run: |
        echo "::set-output name=line_coverage::$(awk -v covered="${{steps.parse_coverage.outputs.line_covered}}" -v missed="${{steps.parse_coverage.outputs.line_missed}}" 'BEGIN{printf "%.0f", covered/(missed+covered) * 100}')"
        echo "::set-output name=instruction_coverage::$(awk -v covered="${{steps.parse_coverage.outputs.instruction_covered}}" -v missed="${{steps.parse_coverage.outputs.instruction_missed}}" 'BEGIN{printf "%.0f", covered/(missed+covered) * 100}')"
        echo "::set-output name=branch_coverage::$(awk -v covered="${{steps.parse_coverage.outputs.branch_covered}}" -v missed="${{steps.parse_coverage.outputs.branch_missed}}" 'BEGIN{printf "%.0f", covered/(missed+covered) * 100}')"
        echo "::set-output name=method_coverage::$(awk -v covered="${{steps.parse_coverage.outputs.method_covered}}" -v missed="${{steps.parse_coverage.outputs.method_missed}}" 'BEGIN{printf "%.0f", covered/(missed+covered) * 100}')"
        echo "::set-output name=class_coverage::$(awk -v covered="${{steps.parse_coverage.outputs.class_covered}}" -v missed="${{steps.parse_coverage.outputs.class_missed}}" 'BEGIN{printf "%.0f", covered/(missed+covered) * 100}')"
    - name: Calculate coverage badges
      id: caulculate_coverage_badges
      shell: bash
      run: |
        echo "::set-output name=line_coverage_marker::$(if ((${{steps.caulculate_coverage_percentage.outputs.line_coverage}}>${{ inputs.coverage-threshold }})); then echo ":heavy_check_mark:"; else echo ":x:"; fi)"
        echo "::set-output name=instruction_coverage_marker::$(if ((${{steps.caulculate_coverage_percentage.outputs.instruction_coverage}}>${{ inputs.coverage-threshold }})); then echo ":heavy_check_mark:"; else echo ":x:"; fi)"
        echo "::set-output name=branch_coverage_marker::$(if ((${{steps.caulculate_coverage_percentage.outputs.branch_coverage}}>${{ inputs.coverage-threshold }})); then echo ":heavy_check_mark:"; else echo ":x:"; fi)"
        echo "::set-output name=method_coverage_marker::$(if ((${{steps.caulculate_coverage_percentage.outputs.method_coverage}}>${{ inputs.coverage-threshold }})); then echo ":heavy_check_mark:"; else echo ":x:"; fi)"
        echo "::set-output name=class_coverage_marker::$(if ((${{steps.caulculate_coverage_percentage.outputs.class_coverage}}>${{ inputs.coverage-threshold }})); then echo ":heavy_check_mark:"; else echo ":x:"; fi)"
    - uses: mshick/add-pr-comment@v1
      with:
        message: |
          | Area  | Coverage(%) | Status |
          | ------------- | ------------- | ------------- |
          | **Line**  | ${{(steps.caulculate_coverage_percentage.outputs.line_coverage)}}  | ${{steps.caulculate_coverage_badges.outputs.line_coverage_marker}} |
          | **Instruction**  | ${{(steps.caulculate_coverage_percentage.outputs.instruction_coverage)}}  | ${{steps.caulculate_coverage_badges.outputs.instruction_coverage_marker}}  |
          | **Branch**  | ${{(steps.caulculate_coverage_percentage.outputs.branch_coverage)}}  | ${{steps.caulculate_coverage_badges.outputs.branch_coverage_marker}}  |
          | **Method**  | ${{(steps.caulculate_coverage_percentage.outputs.method_coverage)}}  | ${{steps.caulculate_coverage_badges.outputs.method_coverage_marker}}  |
          | **Class**  | ${{(steps.caulculate_coverage_percentage.outputs.class_coverage)}}  | ${{steps.caulculate_coverage_badges.outputs.class_coverage_marker}}  |
        proxy-url: https://add-pr-comment-proxy-94idvmwyie-uc.a.run.app
        repo-token: ${{ inputs.repo-token }}
        repo-token-user-login: 'github-actions[bot]'
        allow-repeats: false
